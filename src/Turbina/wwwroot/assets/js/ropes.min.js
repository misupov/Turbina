"use strict";class Rope{constructor(n,t){this.setupAnchors(n,t)}setupAnchors(n,t){this.isStable=!1;this.from=n;this.to=t;this.reset()}reset(){this.oldPosition={from:{x:this.from.x,y:this.from.y},to:{x:this.to.x,y:this.to.y}};this.ropeSimulation=new RopeSimulation(15,1,1e3,20,2,this.from,this.to)}getPath(){var n=[];return this.ropeSimulation.masses.forEach(t=>n.push({x:t.pos.x,y:t.pos.y})),n}simulate(n){this.needsSimulation()&&(this.simulate2(this.from,this.to,Math.min(10,n)),this.oldPosition={from:{x:this.from.x,y:this.from.y},to:{x:this.to.x,y:this.to.y}})}needsSimulation(){return!this.isStable||this.oldPosition.from.x!==this.from.x||this.oldPosition.from.y!==this.from.y||this.oldPosition.to.x!==this.to.x||this.oldPosition.to.y!==this.to.y}simulate2(n,t,i){let r=0;for(let u=0;u<8;u++)this.ropeSimulation.from=n,this.ropeSimulation.to=t,this.ropeSimulation.operate(i/1e3),this.ropeSimulation.masses.forEach(n=>{r+=n.vel.x*n.vel.x+n.vel.y*n.vel.y});this.isStable=r<.1}}class RopeSimulation{constructor(n,t,i,r,u,f,e){this.numOfMasses=n;this.mass=t;this.springConstant=i;this.springFrictionConstant=r;this.airFrictionConstant=u;this.from=f;this.to=e;this.reset()}reset(){const n=this.to.x-this.from.x,t=this.to.y-this.from.y;this.springs=[];this.masses=[];this.masses.push(new Mass(this.mass,this.from.x,this.from.y));for(let i=1;i<=this.numOfMasses;i++)this.masses.push(new Mass(this.mass,this.from.x+n*(i/this.numOfMasses),this.from.y+t*(i/this.numOfMasses))),this.springs.push(new Spring(this.masses[i-1],this.masses[i],this.springConstant,this.springFrictionConstant))}init(){for(let n=0;n<this.masses.length;n++)this.masses[n].init()}solve(){for(let n=0;n<this.springs.length;n++)this.springs[n].solve();for(let n=0;n<this.masses.length;n++){let t=this.masses[n];t.applyForce(-t.vel.x*this.airFrictionConstant,-t.vel.y*this.airFrictionConstant)}}operate(n){this.init();this.solve();this.simulate(n)}simulate(n){this.masses[0].pos.x=this.from.x;this.masses[0].pos.y=this.from.y;this.masses[0].vel.x=0;this.masses[0].vel.y=0;this.masses[this.masses.length-1].pos.x=this.to.x;this.masses[this.masses.length-1].pos.y=this.to.y;this.masses[this.masses.length-1].vel.x=0;this.masses[this.masses.length-1].vel.y=0;for(let t=1;t<this.masses.length-1;t++)this.masses[t].simulate(n)}}class Mass{constructor(n,t,i){this.mass=n;this.pos={x:t,y:i};this.vel={x:0,y:0};this.force={x:0,y:0}}init(){this.force={x:0,y:0}}simulate(n){this.vel.x+=this.force.x/this.mass*n;this.vel.y+=this.force.y/this.mass*n;this.pos.x+=this.vel.x*n;this.pos.y+=this.vel.y*n}applyForce(n,t){this.force.x+=n;this.force.y+=t}}class Spring{constructor(n,t,i,r){this.mass1=n;this.mass2=t;this.springConstant=i;this.frictionConstant=r}solve(){const i=this.mass2.pos.x-this.mass1.pos.x,r=this.mass2.pos.y-this.mass1.pos.y;let n=i*this.springConstant,t=r*this.springConstant;const u=this.mass2.vel.x-this.mass1.vel.x,f=this.mass2.vel.y-this.mass1.vel.y;n+=u*this.frictionConstant;t+=f*this.frictionConstant;this.mass1.applyForce(n,t);this.mass2.applyForce(-n,-t)}}