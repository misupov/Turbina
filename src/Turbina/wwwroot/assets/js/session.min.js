"use strict";class TurbinaSession{constructor(n,t){this._workspace=t;this._updateSubscriptions=new Map;this._webSocket=new WebSocket(n);this._webSocket.onopen=()=>{this.onOpen()};this._webSocket.onmessage=n=>{console.debug(n.data);const i=JSON.parse(n.data);i.workspace===t&&i.messages.forEach(n=>this.handleMessage(n))};this._webSocket.onerror=n=>{alert(n.message)};this._webSocket.onclose=()=>{alert("CLOSE")}}send(n,t,i){const r=this._workspace,u={id:"123",workspace:r,type:n,action:t,args:i};this._webSocket.send(JSON.stringify(u))}handleMessage(n){switch(n.type){case"add-node":this.onAddNode(n);break;case"add-link":this.onAddLink(n);break;case"reset-workspace":this.onResetWorkspace();break;case"value-snapshot":this.onValueSnapshotReceived(n.node,n.pin,n.value);case"new-value":this._handleNewValue(n.node,n.pin,n.value)}}resetWorkspace(){this.send("workspace","reset")}loadWorkspace(){this.send("workspace","load")}createNewNode(n,t,i){this.send("node","add",{"node-type":n,left:t,top:i,title:"none!"})}bindPins(n,t,i,r){this.send("pin","bind",{from:{node:n,pin:t},to:{node:i,pin:r}})}getValueSnapshot(n,t){this.send("pin","get-value",{node:n,pin:t})}subscribe(n,t,i){this.send("pin","subscribe",{node:n,pin:t});const r=new UpdateSubscription(n,t,i);return this._updateSubscriptions.set(n+":"+t,r),r}unsubscribe(n){this._updateSubscriptions.delete(n.node+":"+n.pin)}_handleNewValue(n,t,i){const r=this._updateSubscriptions.get(n+":"+t);if(!!r){r.onUpdate(i);this.send("pin","subscribe",{node:n,pin:t,latestValue:i})}}}class UpdateSubscription{constructor(n,t,i){this.node=n;this.pin=t;this.onUpdate=i}}